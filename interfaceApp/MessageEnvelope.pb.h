// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageEnvelope.proto

#ifndef PROTOBUF_MessageEnvelope_2eproto__INCLUDED
#define PROTOBUF_MessageEnvelope_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace axolotl {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageEnvelope_2eproto();
void protobuf_AssignDesc_MessageEnvelope_2eproto();
void protobuf_ShutdownFile_MessageEnvelope_2eproto();

class MessageEnvelope;

// ===================================================================

class MessageEnvelope : public ::google::protobuf::MessageLite {
 public:
  MessageEnvelope();
  virtual ~MessageEnvelope();

  MessageEnvelope(const MessageEnvelope& from);

  inline MessageEnvelope& operator=(const MessageEnvelope& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const MessageEnvelope& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MessageEnvelope* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MessageEnvelope* other);

  // implements Message ----------------------------------------------

  MessageEnvelope* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MessageEnvelope& from);
  void MergeFrom(const MessageEnvelope& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string scClientDevId = 2;
  inline bool has_scclientdevid() const;
  inline void clear_scclientdevid();
  static const int kScClientDevIdFieldNumber = 2;
  inline const ::std::string& scclientdevid() const;
  inline void set_scclientdevid(const ::std::string& value);
  inline void set_scclientdevid(const char* value);
  inline void set_scclientdevid(const char* value, size_t size);
  inline ::std::string* mutable_scclientdevid();
  inline ::std::string* release_scclientdevid();
  inline void set_allocated_scclientdevid(::std::string* scclientdevid);

  // optional uint32 device_id = 3;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 3;
  inline ::google::protobuf::uint32 device_id() const;
  inline void set_device_id(::google::protobuf::uint32 value);

  // optional bytes supplement = 4;
  inline bool has_supplement() const;
  inline void clear_supplement();
  static const int kSupplementFieldNumber = 4;
  inline const ::std::string& supplement() const;
  inline void set_supplement(const ::std::string& value);
  inline void set_supplement(const char* value);
  inline void set_supplement(const void* value, size_t size);
  inline ::std::string* mutable_supplement();
  inline ::std::string* release_supplement();
  inline void set_allocated_supplement(::std::string* supplement);

  // optional bytes message = 5;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 5;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional string msgId = 6;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgIdFieldNumber = 6;
  inline const ::std::string& msgid() const;
  inline void set_msgid(const ::std::string& value);
  inline void set_msgid(const char* value);
  inline void set_msgid(const char* value, size_t size);
  inline ::std::string* mutable_msgid();
  inline ::std::string* release_msgid();
  inline void set_allocated_msgid(::std::string* msgid);

  // optional bytes recvIdHash = 7;
  inline bool has_recvidhash() const;
  inline void clear_recvidhash();
  static const int kRecvIdHashFieldNumber = 7;
  inline const ::std::string& recvidhash() const;
  inline void set_recvidhash(const ::std::string& value);
  inline void set_recvidhash(const char* value);
  inline void set_recvidhash(const void* value, size_t size);
  inline ::std::string* mutable_recvidhash();
  inline ::std::string* release_recvidhash();
  inline void set_allocated_recvidhash(::std::string* recvidhash);

  // optional bytes senderIdHash = 8;
  inline bool has_senderidhash() const;
  inline void clear_senderidhash();
  static const int kSenderIdHashFieldNumber = 8;
  inline const ::std::string& senderidhash() const;
  inline void set_senderidhash(const ::std::string& value);
  inline void set_senderidhash(const char* value);
  inline void set_senderidhash(const void* value, size_t size);
  inline ::std::string* mutable_senderidhash();
  inline ::std::string* release_senderidhash();
  inline void set_allocated_senderidhash(::std::string* senderidhash);

  // optional string recvDeviceId = 9;
  inline bool has_recvdeviceid() const;
  inline void clear_recvdeviceid();
  static const int kRecvDeviceIdFieldNumber = 9;
  inline const ::std::string& recvdeviceid() const;
  inline void set_recvdeviceid(const ::std::string& value);
  inline void set_recvdeviceid(const char* value);
  inline void set_recvdeviceid(const char* value, size_t size);
  inline ::std::string* mutable_recvdeviceid();
  inline ::std::string* release_recvdeviceid();
  inline void set_allocated_recvdeviceid(::std::string* recvdeviceid);

  // optional bytes recvDevIdBin = 10;
  inline bool has_recvdevidbin() const;
  inline void clear_recvdevidbin();
  static const int kRecvDevIdBinFieldNumber = 10;
  inline const ::std::string& recvdevidbin() const;
  inline void set_recvdevidbin(const ::std::string& value);
  inline void set_recvdevidbin(const char* value);
  inline void set_recvdevidbin(const void* value, size_t size);
  inline ::std::string* mutable_recvdevidbin();
  inline ::std::string* release_recvdevidbin();
  inline void set_allocated_recvdevidbin(::std::string* recvdevidbin);

  // @@protoc_insertion_point(class_scope:axolotl.MessageEnvelope)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_scclientdevid();
  inline void clear_has_scclientdevid();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_supplement();
  inline void clear_has_supplement();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_recvidhash();
  inline void clear_has_recvidhash();
  inline void set_has_senderidhash();
  inline void clear_has_senderidhash();
  inline void set_has_recvdeviceid();
  inline void clear_has_recvdeviceid();
  inline void set_has_recvdevidbin();
  inline void clear_has_recvdevidbin();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* scclientdevid_;
  ::std::string* supplement_;
  ::std::string* message_;
  ::std::string* msgid_;
  ::std::string* recvidhash_;
  ::std::string* senderidhash_;
  ::std::string* recvdeviceid_;
  ::std::string* recvdevidbin_;
  ::google::protobuf::uint32 device_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MessageEnvelope_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MessageEnvelope_2eproto();
  #endif
  friend void protobuf_AssignDesc_MessageEnvelope_2eproto();
  friend void protobuf_ShutdownFile_MessageEnvelope_2eproto();

  void InitAsDefaultInstance();
  static MessageEnvelope* default_instance_;
};
// ===================================================================


// ===================================================================

// MessageEnvelope

// optional string name = 1;
inline bool MessageEnvelope::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageEnvelope::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageEnvelope::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageEnvelope::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MessageEnvelope::name() const {
  // @@protoc_insertion_point(field_get:axolotl.MessageEnvelope.name)
  return *name_;
}
inline void MessageEnvelope::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:axolotl.MessageEnvelope.name)
}
inline void MessageEnvelope::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:axolotl.MessageEnvelope.name)
}
inline void MessageEnvelope::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:axolotl.MessageEnvelope.name)
}
inline ::std::string* MessageEnvelope::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:axolotl.MessageEnvelope.name)
  return name_;
}
inline ::std::string* MessageEnvelope::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageEnvelope::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:axolotl.MessageEnvelope.name)
}

// optional string scClientDevId = 2;
inline bool MessageEnvelope::has_scclientdevid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageEnvelope::set_has_scclientdevid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageEnvelope::clear_has_scclientdevid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageEnvelope::clear_scclientdevid() {
  if (scclientdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scclientdevid_->clear();
  }
  clear_has_scclientdevid();
}
inline const ::std::string& MessageEnvelope::scclientdevid() const {
  // @@protoc_insertion_point(field_get:axolotl.MessageEnvelope.scClientDevId)
  return *scclientdevid_;
}
inline void MessageEnvelope::set_scclientdevid(const ::std::string& value) {
  set_has_scclientdevid();
  if (scclientdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scclientdevid_ = new ::std::string;
  }
  scclientdevid_->assign(value);
  // @@protoc_insertion_point(field_set:axolotl.MessageEnvelope.scClientDevId)
}
inline void MessageEnvelope::set_scclientdevid(const char* value) {
  set_has_scclientdevid();
  if (scclientdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scclientdevid_ = new ::std::string;
  }
  scclientdevid_->assign(value);
  // @@protoc_insertion_point(field_set_char:axolotl.MessageEnvelope.scClientDevId)
}
inline void MessageEnvelope::set_scclientdevid(const char* value, size_t size) {
  set_has_scclientdevid();
  if (scclientdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scclientdevid_ = new ::std::string;
  }
  scclientdevid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:axolotl.MessageEnvelope.scClientDevId)
}
inline ::std::string* MessageEnvelope::mutable_scclientdevid() {
  set_has_scclientdevid();
  if (scclientdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scclientdevid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:axolotl.MessageEnvelope.scClientDevId)
  return scclientdevid_;
}
inline ::std::string* MessageEnvelope::release_scclientdevid() {
  clear_has_scclientdevid();
  if (scclientdevid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scclientdevid_;
    scclientdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageEnvelope::set_allocated_scclientdevid(::std::string* scclientdevid) {
  if (scclientdevid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scclientdevid_;
  }
  if (scclientdevid) {
    set_has_scclientdevid();
    scclientdevid_ = scclientdevid;
  } else {
    clear_has_scclientdevid();
    scclientdevid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:axolotl.MessageEnvelope.scClientDevId)
}

// optional uint32 device_id = 3;
inline bool MessageEnvelope::has_device_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageEnvelope::set_has_device_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageEnvelope::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageEnvelope::clear_device_id() {
  device_id_ = 0u;
  clear_has_device_id();
}
inline ::google::protobuf::uint32 MessageEnvelope::device_id() const {
  // @@protoc_insertion_point(field_get:axolotl.MessageEnvelope.device_id)
  return device_id_;
}
inline void MessageEnvelope::set_device_id(::google::protobuf::uint32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:axolotl.MessageEnvelope.device_id)
}

// optional bytes supplement = 4;
inline bool MessageEnvelope::has_supplement() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageEnvelope::set_has_supplement() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageEnvelope::clear_has_supplement() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageEnvelope::clear_supplement() {
  if (supplement_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    supplement_->clear();
  }
  clear_has_supplement();
}
inline const ::std::string& MessageEnvelope::supplement() const {
  // @@protoc_insertion_point(field_get:axolotl.MessageEnvelope.supplement)
  return *supplement_;
}
inline void MessageEnvelope::set_supplement(const ::std::string& value) {
  set_has_supplement();
  if (supplement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    supplement_ = new ::std::string;
  }
  supplement_->assign(value);
  // @@protoc_insertion_point(field_set:axolotl.MessageEnvelope.supplement)
}
inline void MessageEnvelope::set_supplement(const char* value) {
  set_has_supplement();
  if (supplement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    supplement_ = new ::std::string;
  }
  supplement_->assign(value);
  // @@protoc_insertion_point(field_set_char:axolotl.MessageEnvelope.supplement)
}
inline void MessageEnvelope::set_supplement(const void* value, size_t size) {
  set_has_supplement();
  if (supplement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    supplement_ = new ::std::string;
  }
  supplement_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:axolotl.MessageEnvelope.supplement)
}
inline ::std::string* MessageEnvelope::mutable_supplement() {
  set_has_supplement();
  if (supplement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    supplement_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:axolotl.MessageEnvelope.supplement)
  return supplement_;
}
inline ::std::string* MessageEnvelope::release_supplement() {
  clear_has_supplement();
  if (supplement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = supplement_;
    supplement_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageEnvelope::set_allocated_supplement(::std::string* supplement) {
  if (supplement_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete supplement_;
  }
  if (supplement) {
    set_has_supplement();
    supplement_ = supplement;
  } else {
    clear_has_supplement();
    supplement_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:axolotl.MessageEnvelope.supplement)
}

// optional bytes message = 5;
inline bool MessageEnvelope::has_message() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessageEnvelope::set_has_message() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessageEnvelope::clear_has_message() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessageEnvelope::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& MessageEnvelope::message() const {
  // @@protoc_insertion_point(field_get:axolotl.MessageEnvelope.message)
  return *message_;
}
inline void MessageEnvelope::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:axolotl.MessageEnvelope.message)
}
inline void MessageEnvelope::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:axolotl.MessageEnvelope.message)
}
inline void MessageEnvelope::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:axolotl.MessageEnvelope.message)
}
inline ::std::string* MessageEnvelope::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:axolotl.MessageEnvelope.message)
  return message_;
}
inline ::std::string* MessageEnvelope::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageEnvelope::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:axolotl.MessageEnvelope.message)
}

// optional string msgId = 6;
inline bool MessageEnvelope::has_msgid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MessageEnvelope::set_has_msgid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MessageEnvelope::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MessageEnvelope::clear_msgid() {
  if (msgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgid_->clear();
  }
  clear_has_msgid();
}
inline const ::std::string& MessageEnvelope::msgid() const {
  // @@protoc_insertion_point(field_get:axolotl.MessageEnvelope.msgId)
  return *msgid_;
}
inline void MessageEnvelope::set_msgid(const ::std::string& value) {
  set_has_msgid();
  if (msgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(value);
  // @@protoc_insertion_point(field_set:axolotl.MessageEnvelope.msgId)
}
inline void MessageEnvelope::set_msgid(const char* value) {
  set_has_msgid();
  if (msgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(value);
  // @@protoc_insertion_point(field_set_char:axolotl.MessageEnvelope.msgId)
}
inline void MessageEnvelope::set_msgid(const char* value, size_t size) {
  set_has_msgid();
  if (msgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgid_ = new ::std::string;
  }
  msgid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:axolotl.MessageEnvelope.msgId)
}
inline ::std::string* MessageEnvelope::mutable_msgid() {
  set_has_msgid();
  if (msgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msgid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:axolotl.MessageEnvelope.msgId)
  return msgid_;
}
inline ::std::string* MessageEnvelope::release_msgid() {
  clear_has_msgid();
  if (msgid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msgid_;
    msgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageEnvelope::set_allocated_msgid(::std::string* msgid) {
  if (msgid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgid_;
  }
  if (msgid) {
    set_has_msgid();
    msgid_ = msgid;
  } else {
    clear_has_msgid();
    msgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:axolotl.MessageEnvelope.msgId)
}

// optional bytes recvIdHash = 7;
inline bool MessageEnvelope::has_recvidhash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MessageEnvelope::set_has_recvidhash() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MessageEnvelope::clear_has_recvidhash() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MessageEnvelope::clear_recvidhash() {
  if (recvidhash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvidhash_->clear();
  }
  clear_has_recvidhash();
}
inline const ::std::string& MessageEnvelope::recvidhash() const {
  // @@protoc_insertion_point(field_get:axolotl.MessageEnvelope.recvIdHash)
  return *recvidhash_;
}
inline void MessageEnvelope::set_recvidhash(const ::std::string& value) {
  set_has_recvidhash();
  if (recvidhash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvidhash_ = new ::std::string;
  }
  recvidhash_->assign(value);
  // @@protoc_insertion_point(field_set:axolotl.MessageEnvelope.recvIdHash)
}
inline void MessageEnvelope::set_recvidhash(const char* value) {
  set_has_recvidhash();
  if (recvidhash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvidhash_ = new ::std::string;
  }
  recvidhash_->assign(value);
  // @@protoc_insertion_point(field_set_char:axolotl.MessageEnvelope.recvIdHash)
}
inline void MessageEnvelope::set_recvidhash(const void* value, size_t size) {
  set_has_recvidhash();
  if (recvidhash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvidhash_ = new ::std::string;
  }
  recvidhash_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:axolotl.MessageEnvelope.recvIdHash)
}
inline ::std::string* MessageEnvelope::mutable_recvidhash() {
  set_has_recvidhash();
  if (recvidhash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvidhash_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:axolotl.MessageEnvelope.recvIdHash)
  return recvidhash_;
}
inline ::std::string* MessageEnvelope::release_recvidhash() {
  clear_has_recvidhash();
  if (recvidhash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = recvidhash_;
    recvidhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageEnvelope::set_allocated_recvidhash(::std::string* recvidhash) {
  if (recvidhash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recvidhash_;
  }
  if (recvidhash) {
    set_has_recvidhash();
    recvidhash_ = recvidhash;
  } else {
    clear_has_recvidhash();
    recvidhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:axolotl.MessageEnvelope.recvIdHash)
}

// optional bytes senderIdHash = 8;
inline bool MessageEnvelope::has_senderidhash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MessageEnvelope::set_has_senderidhash() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MessageEnvelope::clear_has_senderidhash() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MessageEnvelope::clear_senderidhash() {
  if (senderidhash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    senderidhash_->clear();
  }
  clear_has_senderidhash();
}
inline const ::std::string& MessageEnvelope::senderidhash() const {
  // @@protoc_insertion_point(field_get:axolotl.MessageEnvelope.senderIdHash)
  return *senderidhash_;
}
inline void MessageEnvelope::set_senderidhash(const ::std::string& value) {
  set_has_senderidhash();
  if (senderidhash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    senderidhash_ = new ::std::string;
  }
  senderidhash_->assign(value);
  // @@protoc_insertion_point(field_set:axolotl.MessageEnvelope.senderIdHash)
}
inline void MessageEnvelope::set_senderidhash(const char* value) {
  set_has_senderidhash();
  if (senderidhash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    senderidhash_ = new ::std::string;
  }
  senderidhash_->assign(value);
  // @@protoc_insertion_point(field_set_char:axolotl.MessageEnvelope.senderIdHash)
}
inline void MessageEnvelope::set_senderidhash(const void* value, size_t size) {
  set_has_senderidhash();
  if (senderidhash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    senderidhash_ = new ::std::string;
  }
  senderidhash_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:axolotl.MessageEnvelope.senderIdHash)
}
inline ::std::string* MessageEnvelope::mutable_senderidhash() {
  set_has_senderidhash();
  if (senderidhash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    senderidhash_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:axolotl.MessageEnvelope.senderIdHash)
  return senderidhash_;
}
inline ::std::string* MessageEnvelope::release_senderidhash() {
  clear_has_senderidhash();
  if (senderidhash_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = senderidhash_;
    senderidhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageEnvelope::set_allocated_senderidhash(::std::string* senderidhash) {
  if (senderidhash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete senderidhash_;
  }
  if (senderidhash) {
    set_has_senderidhash();
    senderidhash_ = senderidhash;
  } else {
    clear_has_senderidhash();
    senderidhash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:axolotl.MessageEnvelope.senderIdHash)
}

// optional string recvDeviceId = 9;
inline bool MessageEnvelope::has_recvdeviceid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MessageEnvelope::set_has_recvdeviceid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MessageEnvelope::clear_has_recvdeviceid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MessageEnvelope::clear_recvdeviceid() {
  if (recvdeviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvdeviceid_->clear();
  }
  clear_has_recvdeviceid();
}
inline const ::std::string& MessageEnvelope::recvdeviceid() const {
  // @@protoc_insertion_point(field_get:axolotl.MessageEnvelope.recvDeviceId)
  return *recvdeviceid_;
}
inline void MessageEnvelope::set_recvdeviceid(const ::std::string& value) {
  set_has_recvdeviceid();
  if (recvdeviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvdeviceid_ = new ::std::string;
  }
  recvdeviceid_->assign(value);
  // @@protoc_insertion_point(field_set:axolotl.MessageEnvelope.recvDeviceId)
}
inline void MessageEnvelope::set_recvdeviceid(const char* value) {
  set_has_recvdeviceid();
  if (recvdeviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvdeviceid_ = new ::std::string;
  }
  recvdeviceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:axolotl.MessageEnvelope.recvDeviceId)
}
inline void MessageEnvelope::set_recvdeviceid(const char* value, size_t size) {
  set_has_recvdeviceid();
  if (recvdeviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvdeviceid_ = new ::std::string;
  }
  recvdeviceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:axolotl.MessageEnvelope.recvDeviceId)
}
inline ::std::string* MessageEnvelope::mutable_recvdeviceid() {
  set_has_recvdeviceid();
  if (recvdeviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvdeviceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:axolotl.MessageEnvelope.recvDeviceId)
  return recvdeviceid_;
}
inline ::std::string* MessageEnvelope::release_recvdeviceid() {
  clear_has_recvdeviceid();
  if (recvdeviceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = recvdeviceid_;
    recvdeviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageEnvelope::set_allocated_recvdeviceid(::std::string* recvdeviceid) {
  if (recvdeviceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recvdeviceid_;
  }
  if (recvdeviceid) {
    set_has_recvdeviceid();
    recvdeviceid_ = recvdeviceid;
  } else {
    clear_has_recvdeviceid();
    recvdeviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:axolotl.MessageEnvelope.recvDeviceId)
}

// optional bytes recvDevIdBin = 10;
inline bool MessageEnvelope::has_recvdevidbin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MessageEnvelope::set_has_recvdevidbin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MessageEnvelope::clear_has_recvdevidbin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MessageEnvelope::clear_recvdevidbin() {
  if (recvdevidbin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvdevidbin_->clear();
  }
  clear_has_recvdevidbin();
}
inline const ::std::string& MessageEnvelope::recvdevidbin() const {
  // @@protoc_insertion_point(field_get:axolotl.MessageEnvelope.recvDevIdBin)
  return *recvdevidbin_;
}
inline void MessageEnvelope::set_recvdevidbin(const ::std::string& value) {
  set_has_recvdevidbin();
  if (recvdevidbin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvdevidbin_ = new ::std::string;
  }
  recvdevidbin_->assign(value);
  // @@protoc_insertion_point(field_set:axolotl.MessageEnvelope.recvDevIdBin)
}
inline void MessageEnvelope::set_recvdevidbin(const char* value) {
  set_has_recvdevidbin();
  if (recvdevidbin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvdevidbin_ = new ::std::string;
  }
  recvdevidbin_->assign(value);
  // @@protoc_insertion_point(field_set_char:axolotl.MessageEnvelope.recvDevIdBin)
}
inline void MessageEnvelope::set_recvdevidbin(const void* value, size_t size) {
  set_has_recvdevidbin();
  if (recvdevidbin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvdevidbin_ = new ::std::string;
  }
  recvdevidbin_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:axolotl.MessageEnvelope.recvDevIdBin)
}
inline ::std::string* MessageEnvelope::mutable_recvdevidbin() {
  set_has_recvdevidbin();
  if (recvdevidbin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    recvdevidbin_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:axolotl.MessageEnvelope.recvDevIdBin)
  return recvdevidbin_;
}
inline ::std::string* MessageEnvelope::release_recvdevidbin() {
  clear_has_recvdevidbin();
  if (recvdevidbin_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = recvdevidbin_;
    recvdevidbin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageEnvelope::set_allocated_recvdevidbin(::std::string* recvdevidbin) {
  if (recvdevidbin_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recvdevidbin_;
  }
  if (recvdevidbin) {
    set_has_recvdevidbin();
    recvdevidbin_ = recvdevidbin;
  } else {
    clear_has_recvdevidbin();
    recvdevidbin_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:axolotl.MessageEnvelope.recvDevIdBin)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace axolotl

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageEnvelope_2eproto__INCLUDED
